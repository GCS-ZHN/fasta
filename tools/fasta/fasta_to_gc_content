#!/usr/bin/env python

"""
From a FASTA file print the GC content
along every sequence in the format:

'chr start end value'

Written by Lucas Sinclair.
Kopimi.

You can use this script from the shell like this:
$ fasta_to_gc_ration seqs.fasta > gc_ration.bed
"""

###############################################################################
def sliding_gc_content(seq, window=8):
    """
    Returns a vector of floats that is the same size as the sequence.
    Border conditions are handled by zero-padding.
    >>> seq = "GCTTTTTGTATTTTAA"
    >>> for i in sliding_gc_content(seq): print i,
    0 0 0 0 0.375 0.25 0.125 0.125 0.125 0.125 0.125 0.125 0 0 0 0
    """
    values = [0] * len(seq)
    for i in range(len(seq)-window+1):
        s = seq[i:i+window]
        g = s.count('G') + s.count('g')
        c = s.count('C') + s.count('c')
        ratio = (g+c)/float(window)
        values[i+(window/2)] = ratio
    return values

###############################################################################
# The libraries we need #
import sys, os
from Bio import SeqIO
from collections import OrderedDict
# Get the shell arguments #
fa_path = sys.argv[1]
# Check that the path is valid #
if not os.path.exists(fa_path): raise Exception("No file at %s." % fa_path)
# Parse #
seqs = (s for s in SeqIO.parse(open(fa_path), 'fasta'))
# Compute #
contigs = OrderedDict()
for s in seqs: contigs[s.id] = sliding_gc_content(s.seq, window=100)
# Output #
for contig, values in contigs.items():
    for pos in range(len(values)):
        print '\t'.join(map(str,[contig, pos, pos+1, values[pos]]))
